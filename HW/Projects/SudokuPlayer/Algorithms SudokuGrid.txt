Algorithms - SudokuGrid

public String toString()
  gridString -> " "
  rowCount = 0
  threeRowCount = 0
  for int i < 9, i++
    columnCount -> 0
	subSectionCount -> 0
	for int k < 9, k++
	  if grid at i,k = 0
	    add "  " to gridString
	  else
	    add grid at i,k + " "
	  columnCount++
	  if columnCount = 3 AND subSectionCount != 2
	    columnCount -> 0
		subSectionCount++
		add "| " to gridString
    rowCount++
	if rowCount = 3 AND threeRowCount != 2
	  rowCount = 0
	  threeRowCount++
	  add "\n-------+-------+-------\n " to gridString
	else
	  add "\n " to gridString
  return gridString
  
public void addInitial(int row, int column, int value)
  grid at row,column -> value
  initGrid at row,column -> true
  
public void addGuess(int row, int column, int value)
  if !initGrid at row,column
    grid at row,column -> value
  
public boolean checkPuzzle()
  if (call isFull)
    for i < 9, i++
	  for k < 9, k++
	    boolean [] check -> call getAllowedValues(i, k)
		if !check at (grid at i,k)
		  return false
  else
    return false
  return true


public boolean [] getAllowedValues(int row, int column)
  boolean [] allowedValues = new boolean [9]
  call Arrays.fill(allowedValues, true)
  for i < 9, i++
    if  grid at row, i != 0 AND grid at row, i != grid at row, column
	  allowedValues at (grid at row, i) - 1 -> false
  for i < 9, i++
    if grid at i, column != 0 AND grid at i, column != grid at row, column
      allowedValues at (grid at i, column) - 1 -> false
  int subsectionNumber -> call findSubsection(row, column)
  int [][] subsection -> call checkSubsection(subsectionNumber)
  for i < 3, i++
    for k < 3, k++
		if subsection at k,i != 0 AND subsection at k,i !+ grid at row,column
		  allowedValues at (subsection at k,i) - 1 -> false
  return allowedValues

public int findSubsection(int row, int column)
  int columnSub -> call findColumnSub(column)
  int subsection -> 0
  if (row + 3)/3 = 1
    if columnSub = 1
	  subSection -> 1
	else if columnSub = 2
	  subSection -> 2
	else if columnSub = 3
	  subSection -> 3
  if (row + 3)/3 = 2
    if columnSub = 1
	  subsection -> 4
	else if columnSub = 2
	  subsection -> 5
    else if columnSub = 3
	  subsection -> 6
  if (row + 3)/3 = 3
    if columnSub = 1
	  subsection -> 7
	else if columnSub = 2
	  subsection -> 8
	else if columnSub = 3
	  subsection -> 9
  return subsection;
  
public int [][] checkSubsection(int subsection)
  int [][] subsectionArray -> new int [3][3]
  int row -> 0
  int column -> 0
  switch(subsection)
    case 1:
	  row -> 0
	  column -> 0
	  break
	case 2:
	  row -> 0
	  column -> 3
	  break  
	case 3:
	  row -> 0
	  column -> 6
	  break  
    case 4:
	  row -> 3
	  column -> 0
	  break
	case 5:
	  row -> 3
	  column -> 3
	  break
	case 6:
	  row -> 3
	  column -> 6
	  break
	case 7:
	  row -> 6
	  column -> 0
	  break
	case 8:
	  row -> 6
	  column -> 3
	  break
	case 9:
	  row -> 6
	  column -> 6
	  break
  return fill3Array(row, column)

public int [][] fill3Array(int row, int column)
  int [][] filledArray -> new int [3][3]
  for i < 3, i++
    for k < 3, k++
	  filledArray at i,k -> grid at (row + 1), (column + k)
  return filledArray

public int findColumnSub(int column)
  if (column + 3)/3 = 1
    return 1
  if (column + 3)/3 = 2
    return 2
  if (column + 3)/3 = 3
    return 3
  else
    return -1;

public boolean isFull()
  for i < 9, i++
    for k < 9, k++
	  if grid at i,k = 0
	    return false
  return true
  
public void reset()
  for i < 9, i++
    for i < k, k++
	  if initGrid at i,K = false
	    grid at i,k -> 0
