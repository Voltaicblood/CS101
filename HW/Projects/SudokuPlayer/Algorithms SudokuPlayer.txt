Algorithms - SudokuGrid

public static void main(String [] args)
  Sudokugrid g = new SudokuGrid()
  print "Please enter in the initial values. This can " +
        "be doneby entering\nin [row] [column] [value]." +
        " You must enter in 15 initial values.\nRow, column," +
        " and values must be between 1-9.");
   call setInitialValues(g)
   call playSudoku(g)
 
public static void setInitialValues(SudokuGrid g)
  Scanner in -> new Scanner(System.in)
  int initialValuesLeft -> 15
  while initialValuesLeft > 0
    print "Initial values left: " + initialValuesLeft
    String initialValueEntered -> in.nextLine().toString()
    Scanner enteredValue -> new Scanner(initialValueEntered)
    int row -> -1
    int column -> -1
    int value -> -1
    int count -> 0
    while enteredValue.hasNextInt()
      count++
      if count = 1
	    row -> enteredValue.nextInt() - 1
        else if count = 2
          column -> enteredValue.nextInt() - 1
        else if count = 3
          value -> enteredValue.nextInt()
    if row > -1 AND row < 9 AND column > -1 AND column < 9 AND value > 0 AND value < 10
      boolean [] allowedValues -> call g.getAllowedValues(row, column)
      if !g.initGrid[row][column]
        if allowedValues[value - 1]
          call g.addInitial(row, column, value);
          initialValuesLeft--
        else
          print "Value conflicts with other initial values."
      else
        if allowedValues[value - 1]
          call g.addInitial(row, column, value)
    else
      print "Row, column, or value is not within 1-9"
      print call g.toString()

public static void playSudoku(SudokuGrid g)
  print "You can now play the game."
  String inputString = "";
  while call g.checkPuzzle() = false
    print "Enter 1 for " +
          "current puzzle state, enter 2 to guess\nat " +
          "at a value, enter 3 to see allowed values " +
          "for a cell.\nEnter reset to reset the puzzle."
    Scanner in -> new Scanner(System.in)
	inputString -> in.next().toString()
	if inputString equals 1
	  print call g.toString
	else if inputString euqls 2
	  call inputGuess(g)
	else if inputString equals 3
	  call inputAllowedCell(g)
	else if inputString equals reset
	  call g.reset
	else
	  print "Incorrect command."
  print call g.toString()

public static void inputGuess(SudokuGrid g)
    print "Please enter in a guess. This can " +
          "be done by entering\nin [row] [column] [value]." +
          " You cannot replace an initial value.\nRow, column," +
          " and values must be between 1-9."
    Scanner in -> new Scanner(System.in)
    String guessedValueEntered -> in.nextLine().toString()
    Scanner enteredValue -> new Scanner(guessedValueEntered)
    int row -> -1
    int column -> -1
    int value -> -1
    int count -> 0
    while enteredValue.hasNextInt()
      count++
      if count = 1
        row -> enteredValue.nextInt() - 1
      else if count = 2
        column -> enteredValue.nextInt() - 1
      else if count = 3
        value -> enteredValue.nextInt()
    if row > -1 AND row < 9 AND column > -1 AND column < 9 AND value > 0 AND value < 10
      boolean [] allowedValues -> call g.getAllowedValues(row, column)
      if !g.initGrid at row,column
        call g.addGuess(row, column, value);
      else
        print "You cannot replace initial values."
    else
      print "Row, column, or value is not within 1-9"
	  
public static void inputAllowedCell(SudokuGrid g)
    print "Please enter in a cell. This can " +
          "be done by entering\nin [row] [column]." +
          " Row, column," +
          " must be between 1-9."
    Scanner in -> new Scanner(System.in)      
    String cellValueEntered -> in.nextLine().toString()
    Scanner enteredValue -> new Scanner(cellValueEntered)
    int row -> -1
    int column -> -1
    int count -> 0
    while enteredValue.hasNextInt()
         count++
         if count = 1
            row -> enteredValue.nextInt() - 1
         else if count = 2
            column -> enteredValue.nextInt() - 1
      if row > -1 && row < 9 && column > -1 && column < 9
         boolean [] allowedValues -> g.getAllowedValues(column, row)
         String allowedString -> "Allowed values: "
         for  i < 9, i++
            if allowedValues at i
               add (i + 1) + " " to allowedString
         print allowedString
      else
         print "Row or column is not within 1-9"

		  